{"version":3,"sources":["webpack:///webpack/bootstrap 6f146639ee501a296b75","webpack:///./js/index.js","webpack:///./js/ui/grid.js","webpack:///./js/core/toolkit.js","webpack:///./js/core/sudoku.js","webpack:///./js/core/generator.js","webpack:///./js/core/checker.js","webpack:///./js/ui/popupnumbers.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC;AACD;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC,C;;;;;;ACxBD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA,IAAG,E;;AAEH,sC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,MAAM;AAC5B,kCAAiC,UAAU;AAC3C,KAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA,I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,oC;AACA;;AAEA,SAAQ;AACR,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA,uB;;;;;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA,sBAAqB,YAAY;AACjC,GAAE;;AAEF;AACA;AACA,iBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA,UAAS,WAAW;AACpB;AACA,kBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;;;;;AC3EA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,E;;;;;;ACtBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAgB,QAAQ;AACxB;AACA;AACA,K;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtDA;AACA;AACA;AACA;;AAEA,gBAAe,gBAAgB;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAwB,cAAc;AACtC;AACA;;AAEA,yBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,cAAc;AACrC;AACA,0BAAyB,cAAc;AACvC;AACA;;AAEA;AACA,yBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,cAAc;AACrC;AACA;AACA,0BAAyB,eAAe;AACxC;AACA,aAAY,mBAAmB;AAC/B;AACA,M;AACA,K;AACA;AACA;AACA;;;;;;;;;;;AChGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,KAAI;AACJ;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,KAAI;AACJ;AACA;AACA;AACA,KAAI;AACJ;AACA;;AAEA;;AAEA,IAAG;AACH;;AAEA;AACA;AACA,UAAS,UAAU;AACnB;AACA,aAAY,KAAK;AACjB,YAAW,IAAI;AACf,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,E","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6f146639ee501a296b75","const Grid = require(\"./ui/grid\");\r\nconst PopupNumbers = require(\"./ui/popupnumbers\");\r\n\r\nconst grid = new Grid($(\"#container\"));\r\ngrid.build();\r\ngrid.layout();\r\n\r\nconst popupNumbers = new PopupNumbers($(\"#popupNumbers\"));\r\ngrid.bindPopup(popupNumbers);\r\n\r\n$(\"#check\").on(\"click\", e => {\r\n\tif(grid.check()) {\r\n\t\talert(\"成功\");\r\n\t}\r\n});\r\n$(\"#reset\").on(\"click\", e => {\r\n\tgrid.reset();\r\n});\r\n$(\"#clear\").on(\"click\", e => {\r\n\tgrid.clear();\r\n});\r\n\r\n$(\"#rebuild\").on(\"click\", e => {\r\n\tgrid.rebuild();\r\n})\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/index.js\n// module id = 0\n// module chunks = 0","//生成九宫格\r\nconst Toolkit = require(\"../core/toolkit\");\r\nconst Sudoku = require(\"../core/sudoku\");\r\nconst Checker = require(\"../core/checker\");\r\n\r\nclass Grid {\r\n\tconstructor(container) {\r\n\t\tthis._$container = container;\r\n\t}\r\n\r\n\tbuild() {\r\n\t\tconst sudoku = new Sudoku();\r\n\t\tsudoku.make();\r\n\t\tconst matrix = sudoku.puzzleMatrix;\r\n\t\t// const generator = new Generator();\r\n\t\t// generator.generate();\r\n\t\t// const matrix = generator.matrix;\r\n\r\n\t\tconst rowGroupClasses = [\"row_g_top\", \"row_g_middle\", \"row_g_bottom\"];\r\n\t\tconst colGroupClasses = [\"col_g_left\", \"col_g_center\", \"col_g_right\"];\r\n\r\n\t\tconst $cells = matrix.map(rowValues => rowValues\r\n\t\t\t.map((cellValue, colIndex) => {\r\n\t\t\t\treturn $(\"<span>\")\r\n\t\t\t\t\t.addClass(colGroupClasses[colIndex % 3])\r\n\t\t\t\t\t.addClass(cellValue ? \"fixed\" : \"empty\")\r\n\t\t\t\t\t.text(cellValue);\r\n\t\t\t}));\r\n\r\n\t\tconst $divArray = $cells.map(($spanArray, rowIndex) => {\r\n\t\t\treturn $(\"<div>\")\r\n\t\t\t\t.addClass(\"row\")\r\n\t\t\t\t.addClass(rowGroupClasses[rowIndex % 3])\r\n\t\t\t\t.append($spanArray);\r\n\t\t});\t\r\n\r\n\t\tthis._$container.append($divArray);\t\r\n\t}\r\n\tlayout() {\r\n\t\tconst width = $(\"span:first\", this._$container).width();\r\n\t\t$(\"span\", this._$container) \r\n\t\t\t.height(width)\r\n\t\t\t.css({\r\n\t\t\t\t\"line-height\": `${width}px`,\r\n\t\t\t\t\"font-size\": width < 32 ? `${width / 2}px` : \"\"\r\n\t\t\t});\r\n\t}\r\n\r\n\t//检查用户解谜的结果，成功则进行提示，失败显示错误的位置标记\r\n\tcheck() {\r\n\t\tconst $rows = this._$container.children();\r\n\t\tconst data = $rows.map((rowIndex, div) => {\r\n\t\t\treturn $(div).children()\r\n\t\t\t    .map((colIndex, span) => parseInt($(span).text()) || 0)\r\n\t\t})\r\n\t\t\t\t.toArray()\r\n\t\t\t\t.map($data => $data.toArray());\r\n\r\n\t\tconsole.log(data);\r\n\r\n\t\tconst checker = new Checker(data);\r\n\t\tif(checker.check()) {\r\n\t\t\treturn true;\r\n\t\t}\t \r\n\t\t//检查不成功，进行标记\r\n\t\tconst marks = checker.matrixMarks;\r\n\t\tthis._$container.children()\r\n\t\t    .each((rowIndex, div) => {\r\n\t\t    \t$(div).children().each((colIndex, span) => {\r\n\t\t    \t\tconst $span = $(span);\r\n\t\t    \t\tif($span.is(\".fixed\") || marks[rowIndex][colIndex]) {\r\n\t\t    \t\t\t$span.removeClass(\"error\");\r\n\t\t    \t\t} else {\r\n\t\t    \t\t\t$(span).addClass(\"error\");\t\t    \t\t\t\r\n\t\t    \t\t}\r\n\r\n\t\t    \t});\r\n\t\t    });\r\n\t}\r\n\t//重置当前的迷盘到初始状态\r\n\treset() {\r\n\t\tthis._$container.find(\"span:not(.fixed)\")\r\n\t\t\t.removeClass(\"error mark1 mark2\")\r\n\t\t\t.addClass(\"empty\")\r\n\t\t\t.text(0);\r\n\t}\r\n\t//清理错误标记\r\n\tclear() {\r\n\t\tthis._$container.find(\"span.error\")\r\n\t\t\t.removeClass(\"error\")\r\n\t}\r\n\r\n\trebuild() {\r\n\t\tthis._$container.empty();\r\n\t\tthis.build();\r\n\t\tthis.layout();\r\n\t}\r\n\r\n\tbindPopup(popupNumbers) {\r\n\t\tthis._$container.on(\"click\", \"span\", e => {\r\n\t\t\tconst $cell = $(e.target);\r\n\t\t\tif($cell.is(\".fixed\")) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tpopupNumbers.popup($cell);\r\n\t\t})\r\n\t}\r\n}\r\n\r\nmodule.exports = Grid;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/grid.js\n// module id = 1\n// module chunks = 0","/*矩阵数组相关工具*/\r\nconst matrixToolkit = {\r\n\tmakeRow(v = 0) {\r\n\t\tconst array = new Array(9);\r\n\t\tarray.fill(v);\r\n\t\treturn array;\r\n\t},\r\n\r\n\tmakeMatrix(v = 0) {\r\n\t\treturn Array.from({ length: 9 }, () => this.makeRow(v));\r\n\t},\r\n\r\n\tshuffle(array) {\r\n\t\tconst endIndex = array.length - 2;\r\n\t\tfor(let i = 0; i <= endIndex; i++) {\r\n\t\t\tconst j = Math.floor(Math.random() * (array.length - i));\r\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\r\n\t\t}\r\n\t\treturn array;\r\n\t},\r\n\r\n\tcheckFillable(matrix, n, rowIndex, colIndex) {\r\n\t\tconst row = matrix[rowIndex];\r\n\t\tconst column = this.makeRow().map((v, i) => matrix[i][colIndex]);\r\n\t\tconst { boxIndex } = boxToolkit.convertToBoxIndex(rowIndex, colIndex);\r\n\t\tconst box = boxToolkit.getBoxCells(matrix, boxIndex);\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tif (row[i] === n\r\n\t\t\t\t|| column[i] === n\r\n\t\t\t\t|| box[i] === n)\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\n/*宫坐标系工具*/\r\nconst boxToolkit = {\r\n\tgetBoxCells(matrix, boxIndex) {\r\n\t\tconst startRowIndex = Math.floor(boxIndex / 3) * 3;\r\n\t\tconst startColIndex = boxIndex % 3 * 3;\r\n\t\tconst result = [];\r\n\t\tfor (let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n\t\t\tconst rowIndex = startRowIndex + Math.floor( cellIndex / 3);\r\n\t\t\tconst colIndex = startColIndex + cellIndex % 3;\r\n\t\t\tresult.push(matrix[rowIndex][colIndex]);\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\tconvertToBoxIndex(rowIndex, colIndex) {\r\n\t\treturn {\r\n\t\t\tboxIndex: Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3),\r\n\t\t\tcellIndex: rowIndex % 3 * 3 + colIndex % 3\r\n\t\t};\r\n\t},\r\n\tconvertFromBoxIndex(boxIndex, cellIndex) {\r\n\t\treturn {\r\n\t\t\trowIndex: Math.floor(boxIndex / 3) * 3 + Math.floor(cellIndex / 3),\r\n\t\t\tcolIndex: boxIndex % 3 * 3 + cellIndex % 3\r\n\t\t}\r\n\t}\r\n};\r\n\r\n//工具集\r\n\r\n\r\nmodule.exports = class Toolkit {\r\n\t/*矩阵和数据相关工具*/\r\n\tstatic get matrix() {\r\n\t\treturn matrixToolkit;\r\n\t}\r\n\t/*宫坐标系相关工具*/\r\n\tstatic get box() {\r\n\t\treturn boxToolkit;\r\n\t}\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/toolkit.js\n// module id = 2\n// module chunks = 0","//生成数独游戏\r\n\r\n//1.生成完成的解决方案：Generator\r\n//2.随机去除部分数据：按比例\r\n\r\nconst Generator = require(\"./generator\");\r\n\r\nmodule.exports = class Sudoku {\r\n\tconstructor () {\r\n\t\t//生成完成的解决方案\r\n\t\tconst generator = new Generator();\r\n\t\tgenerator.generate();\r\n\t\tthis.solutionMatrix = generator.matrix;\r\n\t}\r\n\r\n\tmake (level = 5) {\r\n\t\t//const shouldRid = Math.random() * 9 < level;\r\n\t\t//生成迷盘\r\n\t\tthis.puzzleMatrix = this.solutionMatrix.map(row => {\r\n\t\t\treturn row.map(cell => Math.random() * 9 < level ? 0 : cell);\r\n\t\t});\r\n\t}\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/sudoku.js\n// module id = 3\n// module chunks = 0","//生成数独解决方案\r\nconst Toolkit = require(\"./toolkit\");\r\n\r\nmodule.exports = class Generator {\r\n\tgenerate () {\r\n\t\twhile (!this.internalGenerate()) {\r\n\t\t\tconsole.warn(\"try again\");\r\n\t\t}\r\n\t}\r\n\tinternalGenerate () {\r\n\t\tthis.matrix = Toolkit.matrix.makeMatrix();\r\n\t\tthis.orders = Toolkit.matrix.makeMatrix()\r\n\t\t\t.map(row => row.map((v, i) => i))\r\n\t\t\t.map(row => Toolkit.matrix.shuffle(row));\r\n\r\n\t\tfor(let n = 1; n <= 9; n++) {\r\n\t\t\tif(!this.fillNumber(n)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfillNumber(n) {\r\n\t\treturn this.fillRow(n, 0);\r\n\t}\r\n\r\n\tfillRow(n, rowIndex) {\r\n\t\tif(rowIndex > 8) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tconst row = this.matrix[rowIndex];\r\n\t\tconst orders = this.orders[rowIndex];\r\n\t\tfor(let i = 0; i < 9; i++) {\r\n\t\t\tconst colIndex = orders[i];\r\n\t\t\t//如果这个位置已经有值，跳过\r\n\t\t\tif(row[colIndex]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t//检查这个位置是否可以填n\r\n\t\t\tif(!Toolkit.matrix.checkFillable(this.matrix, n, rowIndex, colIndex)) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\trow[colIndex] = n;\r\n\t\t\tif(!this.fillRow(n, rowIndex + 1)) {\r\n\t\t\t\trow[colIndex] = 0;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/generator.js\n// module id = 4\n// module chunks = 0","\r\nfunction checkArray(array) {\r\n\tconst length = array.length;\r\n\tconst marks = new Array(length);\r\n\tmarks.fill(true);\r\n\r\n\tfor(let i = 0; i < length - 1; i++) {\r\n\t\tif(!marks[i]) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tconst v = array[i];\r\n\t\t//是否有效，0无效，1-9有效\r\n\t\tif(!v) {\r\n\t\t\tmarks[i] = false;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t//是否有重复 i+1 ~ 9,是否和i位置的数据重复\r\n\t\tfor(let j = i + 1; j < length; j++) {\r\n\t\t\tif(v === array[j]) {\r\n\t\t\t\tmarks[i] = marks[j] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn marks;\r\n}\r\n\r\nconst Toolkit = require(\"./toolkit\");\r\n//输入： matrix，用户完成的数独数据，9*9\r\n//处理： 对matrix行，列，宫进行检查，并填写marks\r\n//输出： 检查是否成功，marks\r\nmodule.exports = class Checker {\r\n\tconstructor(matrix) {\r\n\t\tthis._matrix = matrix;\r\n\t\tthis._matrixMarks = Toolkit.matrix.makeMatrix(true);      \t\t\r\n\t}\r\n\r\n\tget matrixMarks() {\r\n\t\treturn this._matrixMarks;\r\n\t}\r\n\r\n\tget isSuccess() {\r\n\t\treturn this._success;\r\n\t}\r\n\r\n\tcheck() {\r\n\t\tthis.checkRows();\r\n\t\tthis.checkCols();\r\n\t\tthis.checkBoxes();\r\n\r\n\t\t//检查是否成功\r\n\t\tthis._success = this._matrixMarks.every(row => row.every(mark => mark))\r\n\t\treturn this._success;\r\n\t}\r\n\r\n\tcheckRows() {\r\n\t\tfor (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n\t\t\tconst row = this._matrix[rowIndex];\r\n\t\t\tconst marks = checkArray(row);\r\n\r\n\t\t\tfor(let colIndex = 0; colIndex < marks.length; colIndex++) {\r\n\t\t\t\tif(!marks[colIndex]) {\r\n\t\t\t\t\tthis._matrixMarks[rowIndex][colIndex] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcheckCols() {\r\n\t\tfor(let colIndex = 0; colIndex < 9; colIndex++) {\r\n\t\t\tconst cols = [];\r\n\t\t\tfor (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n\t\t\t\tcols[rowIndex] = this._matrix[rowIndex][colIndex];\r\n\t\t\t}\r\n\r\n\t\t\tconst marks = checkArray(cols);\r\n\t\t\tfor(let rowIndex = 0; rowIndex < marks.length; rowIndex++) {\r\n\t\t\t\tif(!marks[rowIndex]) {\r\n\t\t\t\t\tthis._matrixMarks[rowIndex][colIndex] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcheckBoxes() {\r\n\t\tfor(let boxIndex = 0; boxIndex < 9; boxIndex++) {\r\n\t\t\tconst boxes = Toolkit.box.getBoxCells(this._matrix, boxIndex);\r\n\t\t\tconst marks = checkArray(boxes);\r\n\t\t\tfor(let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n\t\t\t\tif(!marks[cellIndex]){\r\n\t\t\t\t\tconst {rowIndex, colIndex} = Toolkit.box.convertFromBoxIndex(boxIndex, cellIndex);\r\n\t\t\t\t\tthis.matrixMarks[rowIndex][colIndex] = false\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/checker.js\n// module id = 5\n// module chunks = 0","module.exports = class PopupNumbers {\r\n\tconstructor($panel) {\r\n\t\tthis._$panel = $panel.hide().removeClass(\"hidden\");\r\n\r\n\t\tthis._$panel.on(\"click\", \"span\", e => {\r\n\t\t\tconst $cell = this._$targetCell;\r\n\r\n\t\t\tconst $span = $(e.target);\r\n\r\n\t\t\tif($span.hasClass(\"mark1\")) {\r\n\t\t\t\tif($cell.hasClass(\"mark1\")) {\r\n\t\t\t\t\t$cell.removeClass(\"mark1\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$cell.removeClass(\"mark2\")\r\n\t\t\t\t\t     .addClass(\"mark1\");\r\n\t\t\t\t}\r\n\t\t\t} else if($span.hasClass(\"mark2\")) {\r\n\t\t\t\tif($cell.hasClass(\"mark2\")) {\r\n\t\t\t\t\t$cell.removeClass(\"mark2\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$cell.removeClass(\"mark1\")\r\n\t\t\t\t\t     .addClass(\"mark2\");\r\n\t\t\t\t}\r\n\t\t\t} else if($span.hasClass(\"empty\")) {\r\n\t\t\t\t//empty取消数字填写,取消mark\r\n\t\t\t\t$cell.text(0)\r\n\t\t\t\t\t .addClass(\"empty\");\r\n\t\t\t} else {\r\n\t\t\t\t$cell.removeClass(\"empty\").text($span.text());\r\n\t\t\t}\r\n\r\n\t\t\tthis.hide();\r\n\r\n\t\t})\r\n\t}\r\n\r\n\tpopup($cell) {\r\n\t\tthis._$targetCell = $cell;\r\n\t\tconst {left, top} = $cell.position();\r\n\t\tthis._$panel.css({\r\n\t\t\tleft: `${left}px`,\r\n\t\t\ttop: `${top}px`\r\n\t\t})\r\n\t\t.show()\r\n\t}\r\n\r\n\thide() {\r\n\t\tthis._$panel.hide();\r\n\t}\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/popupnumbers.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}