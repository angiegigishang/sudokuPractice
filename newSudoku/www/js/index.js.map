{"version":3,"sources":["webpack:///webpack/bootstrap e49489b6898f7efe08da","webpack:///./js/index.js","webpack:///./js/ui/grid.js","webpack:///./js/core/toolkit.js","webpack:///./js/core/sudoku.js","webpack:///./js/core/generator.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;;AAGA;AACA;AACA,e;;;;;;ACLA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA,IAAG,E;;AAEH,sC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAsB,MAAM;AAC5B,kCAAiC,UAAU;AAC3C,KAAI;AACJ;AACA;;AAEA,uB;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA,sBAAqB,YAAY;AACjC,GAAE;;AAEF;AACA;AACA,iBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA,UAAS,WAAW;AACpB;AACA,kBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;;;;;AC3EA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,E;;;;;;ACtBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAgB,QAAQ;AACxB;AACA;AACA,K;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e49489b6898f7efe08da","const Grid = require(\"./ui/grid\");\r\n\r\n\r\nconst grid = new Grid($(\"#container\"));\r\ngrid.build();\r\ngrid.layout();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/index.js\n// module id = 0\n// module chunks = 0","//生成九宫格\r\nconst Toolkit = require(\"../core/toolkit\");\r\nconst Sudoku = require(\"../core/sudoku\");\r\n\r\nclass Grid {\r\n\tconstructor(container) {\r\n\t\tthis._$container = container;\r\n\t}\r\n\r\n\tbuild() {\r\n\t\tconst sudoku = new Sudoku();\r\n\t\tsudoku.make();\r\n\t\tconst matrix = sudoku.puzzleMatrix;\r\n\t\t// const generator = new Generator();\r\n\t\t// generator.generate();\r\n\t\t// const matrix = generator.matrix;\r\n\r\n\t\tconst rowGroupClasses = [\"row_g_top\", \"row_g_middle\", \"row_g_bottom\"];\r\n\t\tconst colGroupClasses = [\"col_g_left\", \"col_g_center\", \"col_g_right\"];\r\n\r\n\t\tconst $cells = matrix.map(rowValues => rowValues\r\n\t\t\t.map((cellValue, colIndex) => {\r\n\t\t\t\treturn $(\"<span>\")\r\n\t\t\t\t\t.addClass(colGroupClasses[colIndex % 3])\r\n\t\t\t\t\t.addClass(cellValue ? \"fixed\" : \"empty\")\r\n\t\t\t\t\t.text(cellValue);\r\n\t\t\t}));\r\n\r\n\t\tconst $divArray = $cells.map(($spanArray, rowIndex) => {\r\n\t\t\treturn $(\"<div>\")\r\n\t\t\t\t.addClass(\"row\")\r\n\t\t\t\t.addClass(rowGroupClasses[rowIndex % 3])\r\n\t\t\t\t.append($spanArray);\r\n\t\t});\t\r\n\r\n\t\tthis._$container.append($divArray);\t\r\n\t}\r\n\tlayout() {\r\n\t\tconst width = $(\"span:first\", this._$container).width();\r\n\t\t$(\"span\", this._$container) \r\n\t\t\t.height(width)\r\n\t\t\t.css({\r\n\t\t\t\t\"line-height\": `${width}px`,\r\n\t\t\t\t\"font-size\": width < 32 ? `${width / 2}px` : \"\"\r\n\t\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = Grid;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/ui/grid.js\n// module id = 1\n// module chunks = 0","/*矩阵数组相关工具*/\r\nconst matrixToolkit = {\r\n\tmakeRow(v = 0) {\r\n\t\tconst array = new Array(9);\r\n\t\tarray.fill(v);\r\n\t\treturn array;\r\n\t},\r\n\r\n\tmakeMatrix(v = 0) {\r\n\t\treturn Array.from({ length: 9 }, () => this.makeRow(v));\r\n\t},\r\n\r\n\tshuffle(array) {\r\n\t\tconst endIndex = array.length - 2;\r\n\t\tfor(let i = 0; i <= endIndex; i++) {\r\n\t\t\tconst j = Math.floor(Math.random() * (array.length - i));\r\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\r\n\t\t}\r\n\t\treturn array;\r\n\t},\r\n\r\n\tcheckFillable(matrix, n, rowIndex, colIndex) {\r\n\t\tconst row = matrix[rowIndex];\r\n\t\tconst column = this.makeRow().map((v, i) => matrix[i][colIndex]);\r\n\t\tconst { boxIndex } = boxToolkit.convertToBoxIndex(rowIndex, colIndex);\r\n\t\tconst box = boxToolkit.getBoxCells(matrix, boxIndex);\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tif (row[i] === n\r\n\t\t\t\t|| column[i] === n\r\n\t\t\t\t|| box[i] === n)\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\n/*宫坐标系工具*/\r\nconst boxToolkit = {\r\n\tgetBoxCells(matrix, boxIndex) {\r\n\t\tconst startRowIndex = Math.floor(boxIndex / 3) * 3;\r\n\t\tconst startColIndex = boxIndex % 3 * 3;\r\n\t\tconst result = [];\r\n\t\tfor (let cellIndex = 0; cellIndex < 9; cellIndex++) {\r\n\t\t\tconst rowIndex = startRowIndex + Math.floor( cellIndex / 3);\r\n\t\t\tconst colIndex = startColIndex + cellIndex % 3;\r\n\t\t\tresult.push(matrix[rowIndex][colIndex]);\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\tconvertToBoxIndex(rowIndex, colIndex) {\r\n\t\treturn {\r\n\t\t\tboxIndex: Math.floor(rowIndex / 3) * 3 + Math.floor(colIndex / 3),\r\n\t\t\tcellIndex: rowIndex % 3 * 3 + colIndex % 3\r\n\t\t};\r\n\t},\r\n\tconvertFromBoxIndex(boxIndex, cellIndex) {\r\n\t\treturn {\r\n\t\t\trowIndex: Math.floor(boxIndex / 3) * 3 + Math.floor(cellIndex / 3),\r\n\t\t\tcolIndex: boxIndex % 3 * 3 + cellIndex % 3\r\n\t\t}\r\n\t}\r\n};\r\n\r\n//工具集\r\n\r\n\r\nmodule.exports = class Toolkit {\r\n\t/*矩阵和数据相关工具*/\r\n\tstatic get matrix() {\r\n\t\treturn matrixToolkit;\r\n\t}\r\n\t/*宫坐标系相关工具*/\r\n\tstatic get box() {\r\n\t\treturn boxToolkit;\r\n\t}\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/toolkit.js\n// module id = 2\n// module chunks = 0","//生成数独游戏\r\n\r\n//1.生成完成的解决方案：Generator\r\n//2.随机去除部分数据：按比例\r\n\r\nconst Generator = require(\"./generator\");\r\n\r\nmodule.exports = class Sudoku {\r\n\tconstructor () {\r\n\t\t//生成完成的解决方案\r\n\t\tconst generator = new Generator();\r\n\t\tgenerator.generate();\r\n\t\tthis.solutionMatrix = generator.matrix;\r\n\t}\r\n\r\n\tmake (level = 5) {\r\n\t\t//const shouldRid = Math.random() * 9 < level;\r\n\t\t//生成迷盘\r\n\t\tthis.puzzleMatrix = this.solutionMatrix.map(row => {\r\n\t\t\treturn row.map(cell => Math.random() * 9 < level ? 0 : cell);\r\n\t\t});\r\n\t}\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/sudoku.js\n// module id = 3\n// module chunks = 0","//生成数独解决方案\r\nconst Toolkit = require(\"./toolkit\");\r\n\r\nmodule.exports = class Generator {\r\n\tgenerate () {\r\n\t\twhile (!this.internalGenerate()) {\r\n\t\t\tconsole.warn(\"try again\");\r\n\t\t}\r\n\t}\r\n\tinternalGenerate () {\r\n\t\tthis.matrix = Toolkit.matrix.makeMatrix();\r\n\t\tthis.orders = Toolkit.matrix.makeMatrix()\r\n\t\t\t.map(row => row.map((v, i) => i))\r\n\t\t\t.map(row => Toolkit.matrix.shuffle(row));\r\n\r\n\t\tfor(let n = 1; n <= 9; n++) {\r\n\t\t\tif(!this.fillNumber(n)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfillNumber(n) {\r\n\t\treturn this.fillRow(n, 0);\r\n\t}\r\n\r\n\tfillRow(n, rowIndex) {\r\n\t\tif(rowIndex > 8) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tconst row = this.matrix[rowIndex];\r\n\t\tconst orders = this.orders[rowIndex];\r\n\t\tfor(let i = 0; i < 9; i++) {\r\n\t\t\tconst colIndex = orders[i];\r\n\t\t\t//如果这个位置已经有值，跳过\r\n\t\t\tif(row[colIndex]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t//检查这个位置是否可以填n\r\n\t\t\tif(!Toolkit.matrix.checkFillable(this.matrix, n, rowIndex, colIndex)) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\trow[colIndex] = n;\r\n\t\t\tif(!this.fillRow(n, rowIndex + 1)) {\r\n\t\t\t\trow[colIndex] = 0;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/core/generator.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}